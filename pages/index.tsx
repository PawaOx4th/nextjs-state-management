import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage
} from 'next';
import Head from 'next/head';
import { useObservableState } from 'observable-hooks';
import React, { useEffect, useState } from 'react';
import toast, { Toaster } from 'react-hot-toast';
import Counter from '../src/feature/counter/Counter';
import CardTodo from '../src/feature/todo/components/CardTodo';
import { countTodoComplate$, todos$ } from '../src/feature/todo/TodoStore';
import { ITodo } from '../src/interfaces/ITodo';

export const getServerSideProps: GetServerSideProps<{
  todoList: ITodo[];
}> = async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos');
  const result = await response.json();
  todos$.next(result);

  return {
    props: {
      todoList: todos$.getValue()
    }
  };
};

const Home: NextPage<
  InferGetServerSidePropsType<typeof getServerSideProps>
> = ({ todoList }) => {
  const todoState = useObservableState(todos$);
  const countTodoIscomplate = useObservableState(countTodoComplate$);

  const handleDeleteThisItem = (id: number) => {
    const _todos = todoState.filter((todo) => todo.id !== id);
    todos$.next(_todos);
  };

  const handleUpdateTodo = (id: number, newData: ITodo) => {
    const _todoIndex = todoState.findIndex((todo) => todo.id === id);
    const _todoState = [...todoState];
    _todoState[_todoIndex].completed = !_todoState[_todoIndex].completed;
    todos$.next(_todoState);
  };

  useEffect(() => {
    toast.success('Success.');
  }, []);

  return (
    <div suppressHydrationWarning={true}>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content=" Generated by create next app"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      {/* {!SSR && <Toaster />} */}
      <main className="container m-auto flex min-h-screen  flex-col items-center  justify-center font-inter text-2xl font-semibold transition-all">
        <h1 className="my-6 rounded bg-slate-200 p-3 font-inter text-3xl">
          {' '}
          NextJs + State management. âš¡
        </h1>
        <Counter />
        <div>Complate count : {countTodoIscomplate}</div>
        <hr />
        <section className="text-base">
          <ul>
            {todoState.map((todo, index) => (
              <CardTodo
                key={todo.id}
                todo={todo}
                deleteThisTodo={handleDeleteThisItem}
                updateThisTodo={handleUpdateTodo}
              />
            ))}
          </ul>
        </section>
      </main>
    </div>
  );
};

export default Home;
